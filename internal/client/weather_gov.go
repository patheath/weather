package client

import (
	"encoding/json"
	"io"
	"log"
	"net/http"
	"time"

	"github.com/patheath/weather/internal/model"
)

// https://api.weather.gov/gridpoints/BOX/64,85/forecast/hourly
// https://mholt.github.io/json-to-go/
type AutoGenerated struct {
	Context  []any  `json:"@context,omitempty"`
	Type     string `json:"type,omitempty"`
	Geometry struct {
		Type        string        `json:"type,omitempty"`
		Coordinates [][][]float64 `json:"coordinates,omitempty"`
	} `json:"geometry,omitempty"`
	Properties struct {
		Updated           time.Time `json:"updated,omitempty"`
		Units             string    `json:"units,omitempty"`
		ForecastGenerator string    `json:"forecastGenerator,omitempty"`
		GeneratedAt       time.Time `json:"generatedAt,omitempty"`
		UpdateTime        time.Time `json:"updateTime,omitempty"`
		ValidTimes        string    `json:"validTimes,omitempty"` // override to string due to issues
		Elevation         struct {
			UnitCode string  `json:"unitCode,omitempty"`
			Value    float64 `json:"value,omitempty"`
		} `json:"elevation,omitempty"`
		Periods []struct {
			Number                     int    `json:"number,omitempty"`
			Name                       string `json:"name,omitempty"`
			StartTime                  string `json:"startTime,omitempty"`
			EndTime                    string `json:"endTime,omitempty"`
			IsDaytime                  bool   `json:"isDaytime,omitempty"`
			Temperature                int    `json:"temperature,omitempty"`
			TemperatureUnit            string `json:"temperatureUnit,omitempty"`
			TemperatureTrend           any    `json:"temperatureTrend,omitempty"`
			ProbabilityOfPrecipitation struct {
				UnitCode string `json:"unitCode,omitempty"`
				Value    int    `json:"value,omitempty"`
			} `json:"probabilityOfPrecipitation,omitempty"`
			Dewpoint struct {
				UnitCode string  `json:"unitCode,omitempty"`
				Value    float64 `json:"value,omitempty"`
			} `json:"dewpoint,omitempty"`
			RelativeHumidity struct {
				UnitCode string `json:"unitCode,omitempty"`
				Value    int    `json:"value,omitempty"`
			} `json:"relativeHumidity,omitempty"`
			WindSpeed        string `json:"windSpeed,omitempty"`
			WindDirection    string `json:"windDirection,omitempty"`
			Icon             string `json:"icon,omitempty"`
			ShortForecast    string `json:"shortForecast,omitempty"`
			DetailedForecast string `json:"detailedForecast,omitempty"`
		} `json:"periods,omitempty"`
	} `json:"properties,omitempty"`
}

func FetchWeather() model.Weather {
	resp := getWeather()
	w := readResponse(resp)
	return w
}

func min(a, b int) int {
    if a < b {
        return a
    }
    return b
}

func readResponse(resp *http.Response) model.Weather {

	defer resp.Body.Close()

	//Read the response body
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatalln(err)
	}

	var result AutoGenerated
	if err := json.Unmarshal(body, &result); err != nil { // Parse []byte to go struct pointer
		log.Println("Can not unmarshal JSON")
		log.Fatal(err)
	}

	h := []model.Forecast{}
	var f model.Forecast
	n := min(len(result.Properties.Periods), 10)
	for _, v := range result.Properties.Periods[:n] {
		f.Hour = v.Number
		f.Temp = v.Temperature
		f.Short = v.ShortForecast
		h = append(h, f)
	}

	return model.Weather{
		Hourly: h,
	}
}

func getWeather() *http.Response {
	client := &http.Client{}
	req, err := http.NewRequest("GET", "https://api.weather.gov/gridpoints/BOX/64,85/forecast/hourly", nil)
	if err != nil {
		log.Fatal(err)
	}

	req.Header.Add("User-Agent", "(weather-cli, patheath@gmail.com)")
	resp, err := client.Do(req)
	if err != nil {
		log.Fatal(err)
	}

	return resp
}
