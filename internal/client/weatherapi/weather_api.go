package weatherapi

import (
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strings"
	"time"

	"github.com/patheath/weather/internal/model"
)

type WeatherApi struct {
	Url string
}

const Url = "https://api.weatherapi.com/v1/forecast.json?key=TOKEN&q=02481&days=1&aqi=no&alerts=no"

// https://mholt.github.io/json-to-go/
type autoGenerated struct {
	Location struct {
		Name           string  `json:"name,omitempty"`
		Region         string  `json:"region,omitempty"`
		Country        string  `json:"country,omitempty"`
		Lat            float64 `json:"lat,omitempty"`
		Lon            float64 `json:"lon,omitempty"`
		TzID           string  `json:"tz_id,omitempty"`
		LocaltimeEpoch int     `json:"localtime_epoch,omitempty"`
		Localtime      string  `json:"localtime,omitempty"`
	} `json:"location,omitempty"`
	Current struct {
		LastUpdatedEpoch int     `json:"last_updated_epoch,omitempty"`
		LastUpdated      string  `json:"last_updated,omitempty"`
		TempC            float64 `json:"temp_c,omitempty"`
		TempF            float64 `json:"temp_f,omitempty"`
		IsDay            int     `json:"is_day,omitempty"`
		Condition        struct {
			Text string `json:"text,omitempty"`
			Icon string `json:"icon,omitempty"`
			Code int    `json:"code,omitempty"`
		} `json:"condition,omitempty"`
		WindMph    float64 `json:"wind_mph,omitempty"`
		WindKph    float64 `json:"wind_kph,omitempty"`
		WindDegree int     `json:"wind_degree,omitempty"`
		WindDir    string  `json:"wind_dir,omitempty"`
		PressureMb float64 `json:"pressure_mb,omitempty"`
		PressureIn float64 `json:"pressure_in,omitempty"`
		PrecipMm   float64 `json:"precip_mm,omitempty"`
		PrecipIn   float64 `json:"precip_in,omitempty"`
		Humidity   int     `json:"humidity,omitempty"`
		Cloud      int     `json:"cloud,omitempty"`
		FeelslikeC float64 `json:"feelslike_c,omitempty"`
		FeelslikeF float64 `json:"feelslike_f,omitempty"`
		VisKm      float64 `json:"vis_km,omitempty"`
		VisMiles   float64 `json:"vis_miles,omitempty"`
		Uv         float64 `json:"uv,omitempty"`
		GustMph    float64 `json:"gust_mph,omitempty"`
		GustKph    float64 `json:"gust_kph,omitempty"`
	} `json:"current,omitempty"`
	Forecast struct {
		Forecastday []struct {
			Date      string `json:"date,omitempty"`
			DateEpoch int    `json:"date_epoch,omitempty"`
			Day       struct {
				MaxtempC          float64 `json:"maxtemp_c,omitempty"`
				MaxtempF          float64 `json:"maxtemp_f,omitempty"`
				MintempC          float64 `json:"mintemp_c,omitempty"`
				MintempF          float64 `json:"mintemp_f,omitempty"`
				AvgtempC          float64 `json:"avgtemp_c,omitempty"`
				AvgtempF          float64 `json:"avgtemp_f,omitempty"`
				MaxwindMph        float64 `json:"maxwind_mph,omitempty"`
				MaxwindKph        float64 `json:"maxwind_kph,omitempty"`
				TotalprecipMm     float64 `json:"totalprecip_mm,omitempty"`
				TotalprecipIn     float64 `json:"totalprecip_in,omitempty"`
				TotalsnowCm       float64 `json:"totalsnow_cm,omitempty"`
				AvgvisKm          float64 `json:"avgvis_km,omitempty"`
				AvgvisMiles       float64 `json:"avgvis_miles,omitempty"`
				Avghumidity       int     `json:"avghumidity,omitempty"`
				DailyWillItRain   int     `json:"daily_will_it_rain,omitempty"`
				DailyChanceOfRain int     `json:"daily_chance_of_rain,omitempty"`
				DailyWillItSnow   int     `json:"daily_will_it_snow,omitempty"`
				DailyChanceOfSnow int     `json:"daily_chance_of_snow,omitempty"`
				Condition         struct {
					Text string `json:"text,omitempty"`
					Icon string `json:"icon,omitempty"`
					Code int    `json:"code,omitempty"`
				} `json:"condition,omitempty"`
				Uv float64 `json:"uv,omitempty"`
			} `json:"day,omitempty"`
			Astro struct {
				Sunrise          string `json:"sunrise,omitempty"`
				Sunset           string `json:"sunset,omitempty"`
				Moonrise         string `json:"moonrise,omitempty"`
				Moonset          string `json:"moonset,omitempty"`
				MoonPhase        string `json:"moon_phase,omitempty"`
				MoonIllumination int    `json:"moon_illumination,omitempty"`
				IsMoonUp         int    `json:"is_moon_up,omitempty"`
				IsSunUp          int    `json:"is_sun_up,omitempty"`
			} `json:"astro,omitempty"`
			Hour []struct {
				TimeEpoch int     `json:"time_epoch,omitempty"`
				Time      string  `json:"time,omitempty"`
				TempC     float64 `json:"temp_c,omitempty"`
				TempF     float64 `json:"temp_f,omitempty"`
				IsDay     int     `json:"is_day,omitempty"`
				Condition struct {
					Text string `json:"text,omitempty"`
					Icon string `json:"icon,omitempty"`
					Code int    `json:"code,omitempty"`
				} `json:"condition,omitempty"`
				WindMph      float64 `json:"wind_mph,omitempty"`
				WindKph      float64 `json:"wind_kph,omitempty"`
				WindDegree   int     `json:"wind_degree,omitempty"`
				WindDir      string  `json:"wind_dir,omitempty"`
				PressureMb   float64 `json:"pressure_mb,omitempty"`
				PressureIn   float64 `json:"pressure_in,omitempty"`
				PrecipMm     float64 `json:"precip_mm,omitempty"`
				PrecipIn     float64 `json:"precip_in,omitempty"`
				SnowCm       float64 `json:"snow_cm,omitempty"`
				Humidity     int     `json:"humidity,omitempty"`
				Cloud        int     `json:"cloud,omitempty"`
				FeelslikeC   float64 `json:"feelslike_c,omitempty"`
				FeelslikeF   float64 `json:"feelslike_f,omitempty"`
				WindchillC   float64 `json:"windchill_c,omitempty"`
				WindchillF   float64 `json:"windchill_f,omitempty"`
				HeatindexC   float64 `json:"heatindex_c,omitempty"`
				HeatindexF   float64 `json:"heatindex_f,omitempty"`
				DewpointC    float64 `json:"dewpoint_c,omitempty"`
				DewpointF    float64 `json:"dewpoint_f,omitempty"`
				WillItRain   int     `json:"will_it_rain,omitempty"`
				ChanceOfRain int     `json:"chance_of_rain,omitempty"`
				WillItSnow   int     `json:"will_it_snow,omitempty"`
				ChanceOfSnow int     `json:"chance_of_snow,omitempty"`
				VisKm        float64 `json:"vis_km,omitempty"`
				VisMiles     float64 `json:"vis_miles,omitempty"`
				GustMph      float64 `json:"gust_mph,omitempty"`
				GustKph      float64 `json:"gust_kph,omitempty"`
				Uv           float64 `json:"uv,omitempty"`
			} `json:"hour,omitempty"`
		} `json:"forecastday,omitempty"`
	} `json:"forecast,omitempty"`
}

func (wa WeatherApi) ReadResponse(body []byte) (*model.Weather, error) {

	var result autoGenerated
	if err := json.Unmarshal(body, &result); err != nil {
		return nil, fmt.Errorf("Error unmarshalling response: %s", err)
	}

	if len(result.Forecast.Forecastday) == 0 {
		return nil, errors.New("No results from weatherapi.com provider")
	}

	// need to loop over from current hour until end of day
	// pick up at next day
	n := 0
	hour := time.Now().Hour() // start showing the next hour

	day := 0
	if hour == 23 {
		hour = 0 // reset to the start of the next day
		day += 1 // the next day
	}

	h := []model.Forecast{}
	var f model.Forecast

	for n < model.HOURS {
		if len(result.Forecast.Forecastday[day].Hour) < 24 {
			return nil, fmt.Errorf("less than 24 hours in the forecast day %d from weatherapi.com provider", day)
		}
		if hour > 23 {
			hour = 0 // reset to the start of the next day
			day += 1 // the next day
		}
		v := result.Forecast.Forecastday[day].Hour[hour]
		f.Hour = n + 1 // in our forcast struct case hour is the hour from now.
		f.Temp = int(v.TempF)
		f.Short = v.Condition.Text
		h = append(h, f)
		n += 1
		hour += 1
	}

	return &model.Weather{
		Hourly: h,
	}, nil
}

func (wa WeatherApi) GetWeather() ([]byte, error) {

	token, ok := os.LookupEnv("WA_TOKEN")
	if !ok {
		return nil, errors.New("Weather API token not set, can not retrieve data.")
	}
	url := strings.Replace(wa.Url, "TOKEN", token, 1)

	client := &http.Client{}
	req, err := http.NewRequest(http.MethodGet, url, nil)
	if err != nil {
		log.Fatal(err)
	}

	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("Error retrieving weather data: %s", resp.Status)
	}
	//Read the response body
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("Error reading response: %s", err)
	}

	return body, nil
}

func (wa WeatherApi) DisplayName() string {
	return "--- Forecast provided by weatherapi.com ---"
}
